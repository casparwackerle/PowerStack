---
- name: Install openssh-client
  command: |
    kubectl exec -n {{ benchmarking_namespace }} ubuntu-kubectl -- bash -c "apt-get update && apt-get install -y openssh-client"

- name: Set control_node_name based on inventory
  set_fact:
    control_node_name: "{{ hostvars[groups['server'][0]].external_ip }}"

- name: Generate an SSH key pair on the Ubuntu pod if not exists
  command: |
    kubectl exec -n {{ benchmarking_namespace }} ubuntu-kubectl -- bash -c "if [ ! -f /root/.ssh/id_ed25519 ]; then ssh-keygen -t ed25519 -f /root/.ssh/id_ed25519 -q -N ''; fi"
  register: generate_ssh_key
  failed_when: generate_ssh_key.rc != 0
  changed_when: "'Generating public/private ed25519 key pair' in generate_ssh_key.stdout"

- name: Retrieve the public key from the Ubuntu pod
  command: |
    kubectl exec -n {{ benchmarking_namespace }} ubuntu-kubectl -- bash -c "cat /root/.ssh/id_ed25519.pub"
  register: ssh_public_key
  failed_when: ssh_public_key.rc != 0

- name: Add the public key to the control node's authorized_keys
  shell: |
    echo "{{ ssh_public_key.stdout | trim }}" >> /root/.ssh/authorized_keys
  delegate_to: "{{ control_node_name }}"
  become: true

- name: Ensure permissions for authorized_keys on the control node
  file:
    path: /root/.ssh/authorized_keys
    owner: root
    group: root
    mode: '0600'
  delegate_to: "{{ control_node_name }}"
  become: true

- name: Test SSH connection from the Ubuntu pod to the control node
  command: |
    kubectl exec -n {{ benchmarking_namespace }} ubuntu-kubectl -- bash -c "ssh -o StrictHostKeyChecking=no {{ control_node_name }} hostname"
  register: test_ssh_connection
  failed_when: test_ssh_connection.rc != 0
---
- name: Check if monitoring namespace exists
  command: kubectl get namespace {{ monitoring_namespace }}
  register: namespace_check
  ignore_errors: true

- name: Create monitoring namespace if necessary
  when: namespace_check.rc != 0
  command: kubectl create namespace {{ monitoring_namespace }}
  ignore_errors: true

# Step 0: Ensure that all target directories exist on the NFS server

- name: Ensure required directories for persistent storage exist
  file:
    path: "{{ export_path }}/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - grafana
    - prometheus
    - alertmanager
  loop_control:
    label: "{{ item }}"
  become: true

# Step 1: Create the StorageClass
- name: Ensure required variables for StorageClass are defined
  fail:
    msg: "The variable '{{ item }}' is not defined in the inventory."
  with_items:
    - storageclass_name
    - storageclass_size
  when: item is not defined

- name: Create StorageClass manifest
  copy:
    content: |
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: {{ storageclass_name }}
      provisioner: kubernetes.io/no-provisioner
      volumeBindingMode: WaitForFirstConsumer
    dest: "/tmp/{{ storageclass_name }}-storageclass.yaml"
  become: true

- name: Apply StorageClass manifest
  command: kubectl apply -f /tmp/{{ storageclass_name }}-storageclass.yaml
  register: storageclass_result
  changed_when: "'created' in storageclass_result.stdout or 'configured' in storageclass_result.stdout"
  become: true

- name: Debug StorageClass creation output
  debug:
    var: storageclass_result.stdout

# Step 2: Override the default Storageclass local-path (to make it non-default)

- name: Override default storageClass (to make it non-default)
  copy:
    content: |
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        annotations:
          storageclass.kubernetes.io/is-default-class: 'false'
        name: local-path
      provisioner: rancher.io/local-path
    dest: "/tmp/local-path-storageclass.yaml"
  become: true

- name: Apply StorageClass manifest
  command: kubectl apply -f /tmp/local-path-storageclass.yaml
  register: storageclass_result
  changed_when: "'created' in storageclass_result.stdout or 'configured' in storageclass_result.stdout"
  become: true

# Step 3a: Create the PersistentVolume (Grafana)
- name: Create PersistentVolume manifest (Grafana)
  copy:
    content: |
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: {{ pv_name }}-grafana
        labels:
          app: grafana
      spec:
        capacity:
          storage: {{  pv_size_grafana  }}
        accessModes:
          - {{ storage_accessmode }}
        storageClassName: {{ storageclass_name }}
        nfs:
          path: {{ export_path }}/grafana
          server: {{ hostvars[groups['server'][0]]['internal_ip'] }}
    dest: "/tmp/{{ pv_name }}-grafana.yaml"
  become: true

- name: Apply PersistentVolume manifest
  command: kubectl apply -f /tmp/{{ pv_name }}-grafana.yaml
  register: pv_result_grafana
  changed_when: "'created' in pv_result_grafana.stdout or 'configured' in pv_result_grafana.stdout"
  become: true

- name: Debug PersistentVolume creation output
  debug:
    var: pv_result_grafana.stdout

# Step 3b: Create the PersistentVolume (Prometheus)
- name: Create PersistentVolume manifest (Prometheus)
  copy:
    content: |
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: {{ pv_name }}-prometheus
        labels:
          app: prometheus
      spec:
        capacity:
          storage: {{  pv_size_prometheus  }}
        accessModes:
          - {{ storage_accessmode }}
        storageClassName: {{ storageclass_name }}
        nfs:
          path: {{ export_path }}/prometheus
          server: {{ hostvars[groups['server'][0]]['internal_ip'] }}
    dest: "/tmp/{{ pv_name }}-prometheus.yaml"
  become: true

- name: Apply PersistentVolume manifest
  command: kubectl apply -f /tmp/{{ pv_name }}-prometheus.yaml
  register: pv_result_prometheus
  changed_when: "'created' in pv_result_prometheus.stdout or 'configured' in pv_result_prometheus.stdout"
  become: true

- name: Debug PersistentVolume creation output
  debug:
    var: pv_result_prometheus.stdout

# Step 3c: Create the PersistentVolume (AlertManager)
- name: Create PersistentVolume manifest
  copy:
    content: |
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: {{ pv_name }}-alertmanager
        labels:
          app: alertmanager
      spec:
        capacity:
          storage: {{ pv_size_alertmanager }}
        accessModes:
          - {{ storage_accessmode }}
        storageClassName: {{ storageclass_name }}
        nfs:
          path: {{ export_path }}/alertmanager
          server: {{ hostvars[groups['server'][0]]['internal_ip'] }}
    dest: "/tmp/{{ pv_name }}-alertmanager.yaml"
  become: true

- name: Apply PersistentVolume manifest
  command: kubectl apply -f /tmp/{{ pv_name }}-alertmanager.yaml
  register: pv_result_alertmanager
  changed_when: "'created' in pv_result_alertmanager.stdout or 'configured' in pv_result_alertmanager.stdout"
  become: true

- name: Debug PersistentVolume creation output
  debug:
    var: pv_result_alertmanager.stdout

# Step 4: Create the PersistentVolumeClaim (Grafana)
- name: Create PersistentVolumeClaim manifest
  copy:
    content: |
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ pvc_name }}-grafana
        namespace: {{ monitoring_namespace }}
      spec:
        accessModes:
          - {{ storage_accessmode }}
        resources:
          requests:
            storage: {{ pvc_size_grafana }}
        selector:
          matchLabels:
            app: grafana
        storageClassName: {{ storageclass_name }}
    dest: "/tmp/{{ pvc_name }}-grafana.yaml"
  become: true

- name: Apply PersistentVolumeClaim manifest
  command: kubectl apply -f /tmp/{{ pvc_name }}-grafana.yaml
  register: pvc_result_grafana
  changed_when: "'created' in pvc_result_grafana.stdout or 'configured' in pvc_result_grafana.stdout"
  become: true

- name: Debug PersistentVolumeClaim creation output
  debug:
    var: pvc_result_grafana.stdout

# Note
#
# The PCV for Prometheus and AlertManager are best created with the Helm chart.
# To make changes, edit the helm chart values file: 
# Powerstack/ansible/monitoring-stack-ansible/roles/install-monitoring-stack/templates/monitoring-stack-values.yml.j2